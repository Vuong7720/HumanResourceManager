//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getListDto(body: PagingRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/attendance/get-list-dto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListDto(_response);
        });
    }

    protected processGetListDto(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getById(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/attendance/get-by-id?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @param body (optional) 
     * @return Success
     */
    update(id: number | undefined, body: CreateUpdateAttendanceDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/attendance/update?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate(_response);
        });
    }

    protected processUpdate(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create(body: CreateUpdateAttendanceDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/attendance/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param employeeId (optional) 
     * @return Success
     */
    checkOut(employeeId: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/attendance/check-out?";
        if (employeeId === null)
            throw new Error("The parameter 'employeeId' cannot be null.");
        else if (employeeId !== undefined)
            url_ += "employeeId=" + encodeURIComponent("" + employeeId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCheckOut(_response);
        });
    }

    protected processCheckOut(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    delete(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/attendance/delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    deleteByIds(body: number[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/attendance/delete-by-ids";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteByIds(_response);
        });
    }

    protected processDeleteByIds(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getListDto2(body: PagingRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/contract/get-list-dto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListDto2(_response);
        });
    }

    protected processGetListDto2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getById2(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/contract/get-by-id?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetById2(_response);
        });
    }

    protected processGetById2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @param body (optional) 
     * @return Success
     */
    update2(id: number | undefined, body: CreateUpdateContractsDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/contract/update?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate2(_response);
        });
    }

    protected processUpdate2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create2(body: CreateUpdateContractsDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/contract/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate2(_response);
        });
    }

    protected processCreate2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    delete2(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/contract/delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete2(_response);
        });
    }

    protected processDelete2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    deleteByIds2(body: number[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/contract/delete-by-ids";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteByIds2(_response);
        });
    }

    protected processDeleteByIds2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    overview(): Promise<void> {
        let url_ = this.baseUrl + "/api/dashboard/overview";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processOverview(_response);
        });
    }

    protected processOverview(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getListDto3(body: PagingRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/department/get-list-dto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListDto3(_response);
        });
    }

    protected processGetListDto3(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getById3(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/department/get-by-id?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetById3(_response);
        });
    }

    protected processGetById3(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @param body (optional) 
     * @return Success
     */
    update3(id: number | undefined, body: CreateUpdateDepartmentsDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/department/update?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate3(_response);
        });
    }

    protected processUpdate3(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create3(body: CreateUpdateDepartmentsDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/department/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate3(_response);
        });
    }

    protected processCreate3(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    delete3(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/department/delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete3(_response);
        });
    }

    protected processDelete3(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    deleteByIds3(body: number[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/department/delete-by-ids";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteByIds3(_response);
        });
    }

    protected processDeleteByIds3(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getListSelect(): Promise<void> {
        let url_ = this.baseUrl + "/api/department/get-list-select";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListSelect(_response);
        });
    }

    protected processGetListSelect(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getListDto4(body: PagingRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/employee/get-list-dto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListDto4(_response);
        });
    }

    protected processGetListDto4(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getById4(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/employee/get-by-id?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetById4(_response);
        });
    }

    protected processGetById4(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @param body (optional) 
     * @return Success
     */
    update4(id: number | undefined, body: CreateUpdateEmployeesDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/employee/update?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate4(_response);
        });
    }

    protected processUpdate4(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create4(body: CreateUpdateEmployeesDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/employee/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate4(_response);
        });
    }

    protected processCreate4(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    delete4(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/employee/delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete4(_response);
        });
    }

    protected processDelete4(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    deleteByIds4(body: number[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/employee/delete-by-ids";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteByIds4(_response);
        });
    }

    protected processDeleteByIds4(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getListSelect2(): Promise<void> {
        let url_ = this.baseUrl + "/api/employee/get-list-select";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListSelect2(_response);
        });
    }

    protected processGetListSelect2(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getListDto5(body: PagingRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/payroll/get-list-dto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListDto5(_response);
        });
    }

    protected processGetListDto5(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getById5(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/payroll/get-by-id?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetById5(_response);
        });
    }

    protected processGetById5(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @param body (optional) 
     * @return Success
     */
    update5(id: number | undefined, body: CreateUpdatePayrollDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/payroll/update?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate5(_response);
        });
    }

    protected processUpdate5(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create5(body: CreateUpdatePayrollDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/payroll/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate5(_response);
        });
    }

    protected processCreate5(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    delete5(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/payroll/delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete5(_response);
        });
    }

    protected processDelete5(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    deleteByIds5(body: number[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/payroll/delete-by-ids";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteByIds5(_response);
        });
    }

    protected processDeleteByIds5(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getListDto6(body: PagingRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/position/get-list-dto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListDto6(_response);
        });
    }

    protected processGetListDto6(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getById6(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/position/get-by-id?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetById6(_response);
        });
    }

    protected processGetById6(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @param body (optional) 
     * @return Success
     */
    update6(id: number | undefined, body: CreateUpdatePositionsDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/position/update?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate6(_response);
        });
    }

    protected processUpdate6(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create6(body: CreateUpdatePositionsDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/position/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate6(_response);
        });
    }

    protected processCreate6(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    delete6(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/position/delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete6(_response);
        });
    }

    protected processDelete6(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    deleteByIds6(body: number[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/position/delete-by-ids";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteByIds6(_response);
        });
    }

    protected processDeleteByIds6(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    getListSelect3(): Promise<void> {
        let url_ = this.baseUrl + "/api/position/get-list-select";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListSelect3(_response);
        });
    }

    protected processGetListSelect3(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getListDto7(body: PagingRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/user/get-list-dto";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetListDto7(_response);
        });
    }

    protected processGetListDto7(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    getById7(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/user/get-by-id?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetById7(_response);
        });
    }

    protected processGetById7(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @param body (optional) 
     * @return Success
     */
    update7(id: number | undefined, body: CreateUpdateUsersDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/user/update?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdate7(_response);
        });
    }

    protected processUpdate7(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    create7(body: CreateUpdateUsersDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/user/create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate7(_response);
        });
    }

    protected processCreate7(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    delete7(id: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/user/delete?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete7(_response);
        });
    }

    protected processDelete7(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    deleteByIds7(body: number[] | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/user/delete-by-ids";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "DELETE",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteByIds7(_response);
        });
    }

    protected processDeleteByIds7(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: LoginDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/user/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    register(body: RegisterDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/user/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class Attendance implements IAttendance {
    id?: number;
    employeeID?: number | undefined;
    employee?: Employees;
    date?: Date | undefined;
    checkIn?: Date | undefined;
    checkOut?: Date | undefined;
    status?: AttendanceStatus;
    isDeleted?: boolean;
    creationName?: string | undefined;
    creationTime?: Date | undefined;
    updatedBy?: string | undefined;
    updatedAt?: Date | undefined;

    constructor(data?: IAttendance) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.employeeID = _data["employeeID"];
            this.employee = _data["employee"] ? Employees.fromJS(_data["employee"]) : <any>undefined;
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.checkIn = _data["checkIn"] ? new Date(_data["checkIn"].toString()) : <any>undefined;
            this.checkOut = _data["checkOut"] ? new Date(_data["checkOut"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.isDeleted = _data["isDeleted"];
            this.creationName = _data["creationName"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Attendance {
        data = typeof data === 'object' ? data : {};
        let result = new Attendance();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["employeeID"] = this.employeeID;
        data["employee"] = this.employee ? this.employee.toJSON() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["checkIn"] = this.checkIn ? this.checkIn.toISOString() : <any>undefined;
        data["checkOut"] = this.checkOut ? this.checkOut.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["isDeleted"] = this.isDeleted;
        data["creationName"] = this.creationName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAttendance {
    id?: number;
    employeeID?: number | undefined;
    employee?: Employees;
    date?: Date | undefined;
    checkIn?: Date | undefined;
    checkOut?: Date | undefined;
    status?: AttendanceStatus;
    isDeleted?: boolean;
    creationName?: string | undefined;
    creationTime?: Date | undefined;
    updatedBy?: string | undefined;
    updatedAt?: Date | undefined;
}

export enum AttendanceStatus {
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

export class Contracts implements IContracts {
    id?: number;
    employeeID?: number | undefined;
    employee?: Employees;
    contractType?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    salary?: number | undefined;
    isDeleted?: boolean;
    creationName?: string | undefined;
    creationTime?: Date | undefined;
    updatedBy?: string | undefined;
    updatedAt?: Date | undefined;

    constructor(data?: IContracts) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.employeeID = _data["employeeID"];
            this.employee = _data["employee"] ? Employees.fromJS(_data["employee"]) : <any>undefined;
            this.contractType = _data["contractType"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.salary = _data["salary"];
            this.isDeleted = _data["isDeleted"];
            this.creationName = _data["creationName"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Contracts {
        data = typeof data === 'object' ? data : {};
        let result = new Contracts();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["employeeID"] = this.employeeID;
        data["employee"] = this.employee ? this.employee.toJSON() : <any>undefined;
        data["contractType"] = this.contractType;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["salary"] = this.salary;
        data["isDeleted"] = this.isDeleted;
        data["creationName"] = this.creationName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IContracts {
    id?: number;
    employeeID?: number | undefined;
    employee?: Employees;
    contractType?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    salary?: number | undefined;
    isDeleted?: boolean;
    creationName?: string | undefined;
    creationTime?: Date | undefined;
    updatedBy?: string | undefined;
    updatedAt?: Date | undefined;
}

export class CreateUpdateAttendanceDto implements ICreateUpdateAttendanceDto {
    employeeID?: number | undefined;
    employee?: Employees;
    date?: Date | undefined;
    checkIn?: Date | undefined;
    checkOut?: Date | undefined;
    status?: AttendanceStatus;
    userName?: string | undefined;
    userId?: number;

    constructor(data?: ICreateUpdateAttendanceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.employeeID = _data["employeeID"];
            this.employee = _data["employee"] ? Employees.fromJS(_data["employee"]) : <any>undefined;
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.checkIn = _data["checkIn"] ? new Date(_data["checkIn"].toString()) : <any>undefined;
            this.checkOut = _data["checkOut"] ? new Date(_data["checkOut"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.userName = _data["userName"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): CreateUpdateAttendanceDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateAttendanceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["employeeID"] = this.employeeID;
        data["employee"] = this.employee ? this.employee.toJSON() : <any>undefined;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["checkIn"] = this.checkIn ? this.checkIn.toISOString() : <any>undefined;
        data["checkOut"] = this.checkOut ? this.checkOut.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["userName"] = this.userName;
        data["userId"] = this.userId;
        return data;
    }
}

export interface ICreateUpdateAttendanceDto {
    employeeID?: number | undefined;
    employee?: Employees;
    date?: Date | undefined;
    checkIn?: Date | undefined;
    checkOut?: Date | undefined;
    status?: AttendanceStatus;
    userName?: string | undefined;
    userId?: number;
}

export class CreateUpdateContractsDto implements ICreateUpdateContractsDto {
    employeeID?: number | undefined;
    contractType?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    salary?: number | undefined;
    userName?: string | undefined;
    userId?: number;

    constructor(data?: ICreateUpdateContractsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.employeeID = _data["employeeID"];
            this.contractType = _data["contractType"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
            this.salary = _data["salary"];
            this.userName = _data["userName"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): CreateUpdateContractsDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateContractsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["employeeID"] = this.employeeID;
        data["contractType"] = this.contractType;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["salary"] = this.salary;
        data["userName"] = this.userName;
        data["userId"] = this.userId;
        return data;
    }
}

export interface ICreateUpdateContractsDto {
    employeeID?: number | undefined;
    contractType?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
    salary?: number | undefined;
    userName?: string | undefined;
    userId?: number;
}

export class CreateUpdateDepartmentsDto implements ICreateUpdateDepartmentsDto {
    departmentName?: string | undefined;

    constructor(data?: ICreateUpdateDepartmentsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.departmentName = _data["departmentName"];
        }
    }

    static fromJS(data: any): CreateUpdateDepartmentsDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateDepartmentsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["departmentName"] = this.departmentName;
        return data;
    }
}

export interface ICreateUpdateDepartmentsDto {
    departmentName?: string | undefined;
}

export class CreateUpdateEmployeesDto implements ICreateUpdateEmployeesDto {
    fullName?: string | undefined;
    birthDay?: Date | undefined;
    gender?: number | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    address?: string | undefined;
    positionId?: number | undefined;
    departmentId?: number | undefined;
    salary?: number | undefined;
    hireDate?: Date | undefined;
    status?: EmployeeStatus;
    userName?: string | undefined;
    userId?: number;
    contractType?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;

    constructor(data?: ICreateUpdateEmployeesDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fullName = _data["fullName"];
            this.birthDay = _data["birthDay"] ? new Date(_data["birthDay"].toString()) : <any>undefined;
            this.gender = _data["gender"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.address = _data["address"];
            this.positionId = _data["positionId"];
            this.departmentId = _data["departmentId"];
            this.salary = _data["salary"];
            this.hireDate = _data["hireDate"] ? new Date(_data["hireDate"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.userName = _data["userName"];
            this.userId = _data["userId"];
            this.contractType = _data["contractType"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : <any>undefined;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateUpdateEmployeesDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateEmployeesDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullName"] = this.fullName;
        data["birthDay"] = this.birthDay ? this.birthDay.toISOString() : <any>undefined;
        data["gender"] = this.gender;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["address"] = this.address;
        data["positionId"] = this.positionId;
        data["departmentId"] = this.departmentId;
        data["salary"] = this.salary;
        data["hireDate"] = this.hireDate ? this.hireDate.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["userName"] = this.userName;
        data["userId"] = this.userId;
        data["contractType"] = this.contractType;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICreateUpdateEmployeesDto {
    fullName?: string | undefined;
    birthDay?: Date | undefined;
    gender?: number | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    address?: string | undefined;
    positionId?: number | undefined;
    departmentId?: number | undefined;
    salary?: number | undefined;
    hireDate?: Date | undefined;
    status?: EmployeeStatus;
    userName?: string | undefined;
    userId?: number;
    contractType?: string | undefined;
    startDate?: Date | undefined;
    endDate?: Date | undefined;
}

export class CreateUpdatePayrollDto implements ICreateUpdatePayrollDto {
    employeeID?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
    baseSalary?: number | undefined;
    bonus?: number | undefined;
    deductions?: number | undefined;
    netSalary?: number | undefined;
    userName?: string | undefined;
    userId?: number;

    constructor(data?: ICreateUpdatePayrollDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.employeeID = _data["employeeID"];
            this.month = _data["month"];
            this.year = _data["year"];
            this.baseSalary = _data["baseSalary"];
            this.bonus = _data["bonus"];
            this.deductions = _data["deductions"];
            this.netSalary = _data["netSalary"];
            this.userName = _data["userName"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): CreateUpdatePayrollDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdatePayrollDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["employeeID"] = this.employeeID;
        data["month"] = this.month;
        data["year"] = this.year;
        data["baseSalary"] = this.baseSalary;
        data["bonus"] = this.bonus;
        data["deductions"] = this.deductions;
        data["netSalary"] = this.netSalary;
        data["userName"] = this.userName;
        data["userId"] = this.userId;
        return data;
    }
}

export interface ICreateUpdatePayrollDto {
    employeeID?: number | undefined;
    month?: number | undefined;
    year?: number | undefined;
    baseSalary?: number | undefined;
    bonus?: number | undefined;
    deductions?: number | undefined;
    netSalary?: number | undefined;
    userName?: string | undefined;
    userId?: number;
}

export class CreateUpdatePositionsDto implements ICreateUpdatePositionsDto {
    positionName?: string | undefined;

    constructor(data?: ICreateUpdatePositionsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.positionName = _data["positionName"];
        }
    }

    static fromJS(data: any): CreateUpdatePositionsDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdatePositionsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["positionName"] = this.positionName;
        return data;
    }
}

export interface ICreateUpdatePositionsDto {
    positionName?: string | undefined;
}

export class CreateUpdateUsersDto implements ICreateUpdateUsersDto {
    employeeID?: number;
    username?: string | undefined;
    password?: string | undefined;
    role?: Role;
    userName?: string | undefined;
    userId?: number;

    constructor(data?: ICreateUpdateUsersDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.employeeID = _data["employeeID"];
            this.username = _data["username"];
            this.password = _data["password"];
            this.role = _data["role"];
            this.userName = _data["userName"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): CreateUpdateUsersDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUpdateUsersDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["employeeID"] = this.employeeID;
        data["username"] = this.username;
        data["password"] = this.password;
        data["role"] = this.role;
        data["userName"] = this.userName;
        data["userId"] = this.userId;
        return data;
    }
}

export interface ICreateUpdateUsersDto {
    employeeID?: number;
    username?: string | undefined;
    password?: string | undefined;
    role?: Role;
    userName?: string | undefined;
    userId?: number;
}

export class Departments implements IDepartments {
    id?: number;
    departmentName?: string | undefined;
    isDeleted?: boolean;
    creationName?: string | undefined;
    creationTime?: Date | undefined;
    updatedBy?: string | undefined;
    updatedAt?: Date | undefined;
    employees?: Employees[] | undefined;

    constructor(data?: IDepartments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.departmentName = _data["departmentName"];
            this.isDeleted = _data["isDeleted"];
            this.creationName = _data["creationName"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            if (Array.isArray(_data["employees"])) {
                this.employees = [] as any;
                for (let item of _data["employees"])
                    this.employees!.push(Employees.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Departments {
        data = typeof data === 'object' ? data : {};
        let result = new Departments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["departmentName"] = this.departmentName;
        data["isDeleted"] = this.isDeleted;
        data["creationName"] = this.creationName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        if (Array.isArray(this.employees)) {
            data["employees"] = [];
            for (let item of this.employees)
                data["employees"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IDepartments {
    id?: number;
    departmentName?: string | undefined;
    isDeleted?: boolean;
    creationName?: string | undefined;
    creationTime?: Date | undefined;
    updatedBy?: string | undefined;
    updatedAt?: Date | undefined;
    employees?: Employees[] | undefined;
}

export enum EmployeeStatus {
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export class Employees implements IEmployees {
    id?: number;
    fullName?: string | undefined;
    birthDay?: Date | undefined;
    gender?: number | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    address?: string | undefined;
    positionId?: number | undefined;
    position?: Positions;
    departmentId?: number | undefined;
    department?: Departments;
    salary?: number | undefined;
    hireDate?: Date | undefined;
    status?: EmployeeStatus;
    isDeleted?: boolean;
    creationName?: string | undefined;
    creationTime?: Date | undefined;
    updatedBy?: string | undefined;
    updatedAt?: Date | undefined;
    contracts?: Contracts[] | undefined;
    attendances?: Attendance[] | undefined;
    payrolls?: Payroll[] | undefined;

    constructor(data?: IEmployees) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fullName = _data["fullName"];
            this.birthDay = _data["birthDay"] ? new Date(_data["birthDay"].toString()) : <any>undefined;
            this.gender = _data["gender"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.address = _data["address"];
            this.positionId = _data["positionId"];
            this.position = _data["position"] ? Positions.fromJS(_data["position"]) : <any>undefined;
            this.departmentId = _data["departmentId"];
            this.department = _data["department"] ? Departments.fromJS(_data["department"]) : <any>undefined;
            this.salary = _data["salary"];
            this.hireDate = _data["hireDate"] ? new Date(_data["hireDate"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.isDeleted = _data["isDeleted"];
            this.creationName = _data["creationName"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            if (Array.isArray(_data["contracts"])) {
                this.contracts = [] as any;
                for (let item of _data["contracts"])
                    this.contracts!.push(Contracts.fromJS(item));
            }
            if (Array.isArray(_data["attendances"])) {
                this.attendances = [] as any;
                for (let item of _data["attendances"])
                    this.attendances!.push(Attendance.fromJS(item));
            }
            if (Array.isArray(_data["payrolls"])) {
                this.payrolls = [] as any;
                for (let item of _data["payrolls"])
                    this.payrolls!.push(Payroll.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Employees {
        data = typeof data === 'object' ? data : {};
        let result = new Employees();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fullName"] = this.fullName;
        data["birthDay"] = this.birthDay ? this.birthDay.toISOString() : <any>undefined;
        data["gender"] = this.gender;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["address"] = this.address;
        data["positionId"] = this.positionId;
        data["position"] = this.position ? this.position.toJSON() : <any>undefined;
        data["departmentId"] = this.departmentId;
        data["department"] = this.department ? this.department.toJSON() : <any>undefined;
        data["salary"] = this.salary;
        data["hireDate"] = this.hireDate ? this.hireDate.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["isDeleted"] = this.isDeleted;
        data["creationName"] = this.creationName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        if (Array.isArray(this.contracts)) {
            data["contracts"] = [];
            for (let item of this.contracts)
                data["contracts"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.attendances)) {
            data["attendances"] = [];
            for (let item of this.attendances)
                data["attendances"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.payrolls)) {
            data["payrolls"] = [];
            for (let item of this.payrolls)
                data["payrolls"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IEmployees {
    id?: number;
    fullName?: string | undefined;
    birthDay?: Date | undefined;
    gender?: number | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    address?: string | undefined;
    positionId?: number | undefined;
    position?: Positions;
    departmentId?: number | undefined;
    department?: Departments;
    salary?: number | undefined;
    hireDate?: Date | undefined;
    status?: EmployeeStatus;
    isDeleted?: boolean;
    creationName?: string | undefined;
    creationTime?: Date | undefined;
    updatedBy?: string | undefined;
    updatedAt?: Date | undefined;
    contracts?: Contracts[] | undefined;
    attendances?: Attendance[] | undefined;
    payrolls?: Payroll[] | undefined;
}

export class LoginDto implements ILoginDto {
    username?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginDto {
    username?: string | undefined;
    password?: string | undefined;
}

export class PagingRequest implements IPagingRequest {
    field?: string | undefined;
    fieldOption?: boolean;
    pageSize?: number;
    pageNumber?: number;
    keyword?: string | undefined;
    filterDate?: Date | undefined;
    lateAfter?: TimeSpan;
    leaveAfter?: TimeSpan;

    constructor(data?: IPagingRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.field = _data["field"];
            this.fieldOption = _data["fieldOption"];
            this.pageSize = _data["pageSize"];
            this.pageNumber = _data["pageNumber"];
            this.keyword = _data["keyword"];
            this.filterDate = _data["filterDate"] ? new Date(_data["filterDate"].toString()) : <any>undefined;
            this.lateAfter = _data["lateAfter"] ? TimeSpan.fromJS(_data["lateAfter"]) : <any>undefined;
            this.leaveAfter = _data["leaveAfter"] ? TimeSpan.fromJS(_data["leaveAfter"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PagingRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PagingRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        data["fieldOption"] = this.fieldOption;
        data["pageSize"] = this.pageSize;
        data["pageNumber"] = this.pageNumber;
        data["keyword"] = this.keyword;
        data["filterDate"] = this.filterDate ? this.filterDate.toISOString() : <any>undefined;
        data["lateAfter"] = this.lateAfter ? this.lateAfter.toJSON() : <any>undefined;
        data["leaveAfter"] = this.leaveAfter ? this.leaveAfter.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPagingRequest {
    field?: string | undefined;
    fieldOption?: boolean;
    pageSize?: number;
    pageNumber?: number;
    keyword?: string | undefined;
    filterDate?: Date | undefined;
    lateAfter?: TimeSpan;
    leaveAfter?: TimeSpan;
}

export class Payroll implements IPayroll {
    id?: number;
    employeeID?: number | undefined;
    employee?: Employees;
    month?: number | undefined;
    year?: number | undefined;
    baseSalary?: number | undefined;
    bonus?: number | undefined;
    deductions?: number | undefined;
    netSalary?: number | undefined;
    isDeleted?: boolean;
    creationName?: string | undefined;
    creationTime?: Date | undefined;
    updatedBy?: string | undefined;
    updatedAt?: Date | undefined;

    constructor(data?: IPayroll) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.employeeID = _data["employeeID"];
            this.employee = _data["employee"] ? Employees.fromJS(_data["employee"]) : <any>undefined;
            this.month = _data["month"];
            this.year = _data["year"];
            this.baseSalary = _data["baseSalary"];
            this.bonus = _data["bonus"];
            this.deductions = _data["deductions"];
            this.netSalary = _data["netSalary"];
            this.isDeleted = _data["isDeleted"];
            this.creationName = _data["creationName"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Payroll {
        data = typeof data === 'object' ? data : {};
        let result = new Payroll();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["employeeID"] = this.employeeID;
        data["employee"] = this.employee ? this.employee.toJSON() : <any>undefined;
        data["month"] = this.month;
        data["year"] = this.year;
        data["baseSalary"] = this.baseSalary;
        data["bonus"] = this.bonus;
        data["deductions"] = this.deductions;
        data["netSalary"] = this.netSalary;
        data["isDeleted"] = this.isDeleted;
        data["creationName"] = this.creationName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPayroll {
    id?: number;
    employeeID?: number | undefined;
    employee?: Employees;
    month?: number | undefined;
    year?: number | undefined;
    baseSalary?: number | undefined;
    bonus?: number | undefined;
    deductions?: number | undefined;
    netSalary?: number | undefined;
    isDeleted?: boolean;
    creationName?: string | undefined;
    creationTime?: Date | undefined;
    updatedBy?: string | undefined;
    updatedAt?: Date | undefined;
}

export class Positions implements IPositions {
    id?: number;
    positionName?: string | undefined;
    isDeleted?: boolean;
    creationName?: string | undefined;
    creationTime?: Date | undefined;
    updatedBy?: string | undefined;
    updatedAt?: Date | undefined;
    employees?: Employees[] | undefined;

    constructor(data?: IPositions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.positionName = _data["positionName"];
            this.isDeleted = _data["isDeleted"];
            this.creationName = _data["creationName"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : <any>undefined;
            this.updatedBy = _data["updatedBy"];
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
            if (Array.isArray(_data["employees"])) {
                this.employees = [] as any;
                for (let item of _data["employees"])
                    this.employees!.push(Employees.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Positions {
        data = typeof data === 'object' ? data : {};
        let result = new Positions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["positionName"] = this.positionName;
        data["isDeleted"] = this.isDeleted;
        data["creationName"] = this.creationName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["updatedBy"] = this.updatedBy;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        if (Array.isArray(this.employees)) {
            data["employees"] = [];
            for (let item of this.employees)
                data["employees"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IPositions {
    id?: number;
    positionName?: string | undefined;
    isDeleted?: boolean;
    creationName?: string | undefined;
    creationTime?: Date | undefined;
    updatedBy?: string | undefined;
    updatedAt?: Date | undefined;
    employees?: Employees[] | undefined;
}

export class RegisterDto implements IRegisterDto {
    username?: string | undefined;
    password?: string | undefined;
    employeeID?: number;
    role?: Role;

    constructor(data?: IRegisterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
            this.employeeID = _data["employeeID"];
            this.role = _data["role"];
        }
    }

    static fromJS(data: any): RegisterDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        data["employeeID"] = this.employeeID;
        data["role"] = this.role;
        return data;
    }
}

export interface IRegisterDto {
    username?: string | undefined;
    password?: string | undefined;
    employeeID?: number;
    role?: Role;
}

export enum Role {
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export class TimeSpan implements ITimeSpan {
    ticks?: number;
    readonly days?: number;
    readonly hours?: number;
    readonly milliseconds?: number;
    readonly microseconds?: number;
    readonly nanoseconds?: number;
    readonly minutes?: number;
    readonly seconds?: number;
    readonly totalDays?: number;
    readonly totalHours?: number;
    readonly totalMilliseconds?: number;
    readonly totalMicroseconds?: number;
    readonly totalNanoseconds?: number;
    readonly totalMinutes?: number;
    readonly totalSeconds?: number;

    constructor(data?: ITimeSpan) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ticks = _data["ticks"];
            (<any>this).days = _data["days"];
            (<any>this).hours = _data["hours"];
            (<any>this).milliseconds = _data["milliseconds"];
            (<any>this).microseconds = _data["microseconds"];
            (<any>this).nanoseconds = _data["nanoseconds"];
            (<any>this).minutes = _data["minutes"];
            (<any>this).seconds = _data["seconds"];
            (<any>this).totalDays = _data["totalDays"];
            (<any>this).totalHours = _data["totalHours"];
            (<any>this).totalMilliseconds = _data["totalMilliseconds"];
            (<any>this).totalMicroseconds = _data["totalMicroseconds"];
            (<any>this).totalNanoseconds = _data["totalNanoseconds"];
            (<any>this).totalMinutes = _data["totalMinutes"];
            (<any>this).totalSeconds = _data["totalSeconds"];
        }
    }

    static fromJS(data: any): TimeSpan {
        data = typeof data === 'object' ? data : {};
        let result = new TimeSpan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ticks"] = this.ticks;
        data["days"] = this.days;
        data["hours"] = this.hours;
        data["milliseconds"] = this.milliseconds;
        data["microseconds"] = this.microseconds;
        data["nanoseconds"] = this.nanoseconds;
        data["minutes"] = this.minutes;
        data["seconds"] = this.seconds;
        data["totalDays"] = this.totalDays;
        data["totalHours"] = this.totalHours;
        data["totalMilliseconds"] = this.totalMilliseconds;
        data["totalMicroseconds"] = this.totalMicroseconds;
        data["totalNanoseconds"] = this.totalNanoseconds;
        data["totalMinutes"] = this.totalMinutes;
        data["totalSeconds"] = this.totalSeconds;
        return data;
    }
}

export interface ITimeSpan {
    ticks?: number;
    days?: number;
    hours?: number;
    milliseconds?: number;
    microseconds?: number;
    nanoseconds?: number;
    minutes?: number;
    seconds?: number;
    totalDays?: number;
    totalHours?: number;
    totalMilliseconds?: number;
    totalMicroseconds?: number;
    totalNanoseconds?: number;
    totalMinutes?: number;
    totalSeconds?: number;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}